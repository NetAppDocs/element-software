<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "file:///C:/InfoShare/Web/Author/ASP/DocTypes/dita-oasis/1.2/technicalContent/dtd/task.dtd">
<task id="GUID-C5E907E7-9F0C-493C-9148-8B67CD1FA389" xml:lang="en" xmlns:ditaarch="http://dita.oasis-open.org/architecture/2005/">
  <title id="GUID-328993EE-E48C-4A5F-8D16-8BD49512BC59">Install <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph> using Ansible</title>
  <shortdesc>You can install <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph> using an automation tool, such as Ansible. If you are very familiar with Ansible, you can create one Ansible playbook that combines several tasks, such as installing SolidFire eSDS and creating a cluster.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <keyword>solidfire esds</keyword>
        <keyword>installing solidfire esds</keyword>
        <keyword>ansible role</keyword>
      </keywords>
    </metadata>
  </prolog>
  <taskbody>
    <prereq id="GUID-347A1A93-9063-498B-997D-5C0FA9E86BA6">
      <ul id="GUID-C6C6B100-485A-4629-8FD0-284638D82B3C">
        <li>You have installed Ansible on your local server by following the instructions provided <xref href="https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installation-guide" format="html" scope="external">here</xref>. </li>
        <li>You have familiarized yourself with Ansible roles. See <xref href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html" format="html" scope="external">here</xref>.</li>
        <li>You have performed all the prerequisite tasks listed <xref href="51AAB7BF-3EA9-4122-A435-451A5583B32B_.dita" format="dita" outputclass="nopagenum">here</xref>.</li>
        <li>You have run a compliance check for <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph>. For instructions on how to run the compliance check, see <xref href="51AAB7BF-3EA9-4122-A435-451A5583B32B_.dita" format="dita" outputclass="nopagenum">here</xref>.</li>
      </ul>
    </prereq>
    <context id="GUID-5B49E48F-92B9-48A7-A880-3A23EAE96FD6">
      <note type="important" id="GUID-12E2C8DB-4F31-4FF4-8CFC-62CBB1D93E28">You should specify all the required variables in your inventory file and not in the playbook.</note>
    </context>
    <steps id="GUID-E838F850-E35F-49BA-BE3F-30FA28E19B94">
      <step>
        <cmd>Run the <cmdname>ansible-galaxy</cmdname> command to install all the roles relevant to <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph> provided by NetApp. </cmd>
        <info>The install role is <uicontrol>nar_solidfire_sds_install</uicontrol> and will be installed when you run the following command: <screen xml:space="preserve">$  ansible-galaxy install git+https://github.com/netapp/ansible.git
- extracting ansible to ~/.ansible/roles/ansible
- ansible was installed successfully
</screen>You can also manually install the role by copying it from the NetApp GitHub repository and placing the role in the <filepath>~/.ansible/roles</filepath> directory. NetApp provides a README file, which includes information about how to run a role.<note id="GUID-98B818D1-30BB-495B-95BF-42DB2DDBF662">Ensure that you always download the latest versions of the roles. </note></info>
      </step>
      <step>
        <cmd>Move the roles that you downloaded up one directory from where they were installed.</cmd>
        <info>
          <screen xml:space="preserve">$ mv ~/.ansible/roles/ansible/nar_solidfire_sds_* ~/.ansible/roles/</screen>
        </info>
      </step>
      <step>
        <cmd>Run the <cmdname>ansible-galaxy role list</cmdname> command to ensure that Ansible is configured to utilize the new roles.</cmd>
        <info>
          <screen xml:space="preserve">$ ansible-galaxy role list
# ~/.ansible/roles
- nar_solidfire_sds_install, (unknown version)
- nar_solidfire_sds_upgrade, (unknown version)
- ansible, (unknown version)
- nar_solidfire_sds_compliance, (unknown version)
</screen>
          <note id="GUID-B179183F-DE7A-4F7C-9CAB-4DFB0FD81809">The README file associated with roles includes a list of all the required and optional variables that you must define as shown below:<image placement="break" outputclass="kprev" href="6F73A08A-3249-4AEC-87CD-2ACE233915DE_Low.png" /> You should define these variables in the inventory file, which you will create in the next step. </note>
        </info>
      </step>
      <step>
        <cmd>Create the inventory file in your Ansible working directory.</cmd>
        <info>
          <note type="tip" id="GUID-342B1BC9-80F1-46A2-9DAB-F470ECC4B91A">In the inventory file, you should include all the hosts (nodes) on which you want to install <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph>. The inventory file enables the playbook (which you will create in the next step) to manage multiple hosts with a single command. You should also define variables, such as username and password for your storage nodes, names of the management interface and storage interface, and so on.</note>
          <note type="important" id="GUID-03379744-33EF-430F-A384-29BE3324F4BE">Ensure that you follow these guidelines for the inventory file:<ul id="GUID-47A5B78C-198B-4977-8F2F-234CB059E1E7"><li>Use the correct spellings for device names.</li><li>Use correct formatting in the file.</li><li>Ensure that there is only one <cmdname>cacheDevice</cmdname>.</li><li>Use a list to specify <cmdname>storage_devices</cmdname>.</li></ul></note>
          <note id="GUID-39B8C375-570A-4C04-BE43-70E969224DAD"> Use Ansible Vault for sensitive information, such as passwords rather than using plain text. For more information, see the following links:<ul id="GUID-D387ED66-F456-4356-B2B1-AA5B59A3A87D"><li><xref href="https://docs.ansible.com/ansible/latest/user_guide/playbooks_vault.html" format="html" scope="external">Using Ansible Vault</xref></li><li><xref href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html" format="html" scope="external">How to build your inventory</xref></li></ul></note>
        </info>
        <stepxmp>A sample inventory file is shown below. It includes four storage nodes. In this example, replace <uicontrol>storage node MIP</uicontrol> with the MIP addresses for your storage nodes and replace <uicontrol>****</uicontrol> with the username and password for your storage nodes. <screen xml:space="preserve">
all:  
    hosts:  
        storage node MIP:  
        storage node MIP:  
        storage node MIP:  
        storage node MIP:  
    vars:  
        ansible_connection: ssh  
        ansible_ssh_common_args: -o StrictHostKeyChecking=no  
        ansible_user: ***** 
        ansible_ssh_pass: *****
        solidfire_element_rpm: http://sf-artifactory.solidfire.net/artifactory/crux/solidfire-element-**.*.*.***-*.***.x86_64.rpm
        mgmt_iface: "team0"
        storage_iface: "team1"
        storage_devices:
          - "/dev/nvme0n1"
          - "/dev/nvme1n1"
          - "/dev/nvme2n1"
          - "/dev/nvme3n1"
          - "/dev/nvme4n1"
          - "/dev/nvme5n1"
          - "/dev/nvme6n1"
          - "/dev/nvme7n1"
          - "/dev/nvme8n1"
        cache_devices:
          - "/dev/nvme9n1" </screen></stepxmp>
      </step>
      <step>
        <cmd>Ping the hosts (nodes) you defined in the inventory file to verify that Ansible can communicate with them.</cmd>
      </step>
      <step>
        <cmd>Download the Red Hat Package Manager (RPM) file to the file directory on a local web server accessible from the server running Ansible and the storage nodes. </cmd>
      </step>
      <step>
        <cmd>Create the Ansible playbook. If you already have a playbook, you can modify it. You can use the examples in the README file that NetApp provides.</cmd>
        <info>You should use <cmdname>/dev/disk/by-id/nvme-&lt;DriveModel&gt;_&lt;SerialNo&gt;</cmdname> for the cache device instead of <cmdname>/dev/nvme*n1</cmdname> names. You can replace NVME raw names with <cmdname>by-id</cmdname> by specifying the following in your playbook:<screen xml:space="preserve">
    post_tasks:
    - name: Find the supported cache device's by-id path
      set_fact:
        found_device: "/dev/disk/by-id/{{ cdev_info.value['links']['ids'][0] }}"
      with_dict: "{{ ansible_devices }}"
      loop_control:
        loop_var: cdev_info
      when: cdev_info.value['model'] and cdev_info.value['model'].startswith('EO000')
      delegate_to: localhost    - fail:
        msg: "Error: Unable to locate Cache Device on this node!!!"
      when: not found_device or 'EO000' not in found_device    - set_fact:
        cache_devices: ['{{ found_device }}']
      when: cache_devices is defined and cache_devices|length &gt; 0    - name: Update SolidFire eSDS configuration
      include_role:
        name: nar_solidfire_sds_install
        tasks_from: update-config.yml
      vars:
        cache_devices: ['{{ found_device }}']
</screen></info>
      </step>
      <step>
        <cmd>Install <ph conref="ISH_variables.dita#variables/SDS-SHORT">SolidFire eSDS</ph> by running the playbook you created in the previous step:</cmd>
        <info>
          <codeblock xml:space="preserve">$ ansible-playbook -i inventory.yaml sample_playbook.yaml </codeblock>
          <p>Replace <uicontrol>sample_playbook.yaml</uicontrol> with the name of your playbook and <uicontrol>inventory.yaml</uicontrol> with the name of your inventory file. </p>
          <p>Running the playbook creates the <filepath>sf_sds_config.yaml</filepath> file on each node that is listed in your inventory file. It also installs and starts the SolidFire service on each storage node. For more information about <filepath>sf_sds_config.yaml</filepath>, see <xref href="https://docs.netapp.com/sfe-122/topic/com.netapp.doc.sfe-sds-ug/GUID-776A1EF5-ED2F-4946-A92C-CE013CEC3991.html" format="html" scope="external">Contents of the sds_config.yaml file</xref> in the <xref href="https://docs.netapp.com/sfe-122/topic/com.netapp.doc.sfe-sds-ug/home.html" format="html" scope="external">SolidFire Enterprise SDS User Guide</xref>. </p>
        </info>
      </step>
      <step>
        <cmd>Check the Ansible output in the console to ensure that the SolidFire service was started on each node.</cmd>
        <stepxmp>Here is a sample output:<screen xml:space="preserve">
TASK [nar_solidfire_sds_install : Ensure the SolidFire eSDS service is started] *********************************************************************************************  

changed: [10.61.68.52]  

changed: [10.61.68.54]  

changed: [10.61.68.51]  

changed: [10.61.68.53]  

  

PLAY RECAP ******************************************************************************************************************************************************************  

10.61.68.51                : ok=12   changed=3    unreachable=0    
failed=0    skipped=10   rescued=0    ignored=0     

10.61.68.52                : ok=12   changed=3    unreachable=0
failed=0    skipped=10   rescued=0    ignored=0     

10.61.68.53                : ok=12   changed=3    unreachable=0    
failed=0    skipped=10   rescued=0    ignored=0     

10.61.68.54                : ok=12   changed=3    unreachable=0    
failed=0    skipped=10   rescued=0    ignored=0 </screen></stepxmp>
      </step>
      <step>
        <cmd>To verify that the SolidFire service was started correctly, run the <cmdname>systemctl status solidfire</cmdname> command, and check for <cmdname>Active:active (exited)...</cmdname> in the output.</cmd>
      </step>
    </steps>
  </taskbody>
</task>